<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
  <entry key="shortInfo">Basic Docmenta HTML Checks</entry>
  <!-- Check Titles -->
  <entry key="attribute_required.title">Logs, corrects or removes elements with missing attributes</entry>
  <entry key="broken_inline_inclusion.title">Logs broken inline inclusions</entry>
  <entry key="broken_link.title">Logs broken links</entry>
  <entry key="content_required.title">Logs or removes empty elements</entry>
  <entry key="embedded_image.title">Logs or saves base64-encoded images embedded in the src attribute of img elements</entry>
  <entry key="invalid_image_src.title">Logs image elements with invalid src attribute</entry>
  <entry key="invalid_style.title">Logs usage of non-existing style identifiers</entry>
  <entry key="invalid_target_type.title">Logs links with invalid target type</entry>
  <entry key="normalize_textalign.title">Transforms the CSS property text-align to a CSS class (align-left, align-center, align-right, align-full)</entry>
  <entry key="trim_empty_paras.title">Logs or removes empty paragraphs at the end of content nodes</entry>
  <entry key="trim_figure_spaces.title">Logs or removes whitespace around figures</entry>
  <!-- Check messages -->
  <entry key="msgStyleNotFound">Style ''{0}'' not found</entry>
  <entry key="msgTotalInvalidStyleCount">Total invalid style usages: {0}</entry>
  <entry key="msgReferencedAliasTooLong">Referenced alias exceeds maximum length of {0} characters</entry>
  <entry key="msgInlineInclusionAliasNotFound">Referenced node with alias ''{0}'' not found</entry>
  <entry key="msgContentInclusionToNonContent">Content inclusion to node with alias ''{0}'' which is not a content-node</entry>
  <entry key="msgMissingAliasInHref">Missing alias in href attribute ''{0}''</entry>
  <entry key="msgAliasInHrefNotFound">Referenced node with alias ''{0}'' not found</entry>
  <entry key="msgContentLinkToNonContent">Referenced node with alias ''{0}'' is not a content-node</entry>
  <entry key="msgImageLinkToNonSupportedImage">Image link to non-image node with alias ''{0}''</entry>
  <entry key="msgFileLinkToNonFile">File link to non-file node with alias ''{0}''</entry>
  <entry key="msgMissingImageSrcAttribute">Image has no src attribute</entry>
  <entry key="msgMissingAliasInImageSrc">Missing alias in image src ''{0}''</entry>
  <entry key="msgAliasInImageSrcNotFound">Referenced image with alias ''{0}'' not found</entry>
  <entry key="msgImageSrcToNonSupportedImage">Image src references non-image node with alias ''{0}''</entry>
  <entry key="msgInvalidImageSrc">Invalid image src attribute ''{0}''</entry>
  <entry key="msgEmptyParaExists">Found an empty paragraph at the end of the content node</entry>
  <entry key="msgEmptyParaRemoved">Removed empty paragraph from the end of the content node</entry>
  <entry key="msgFigureSpacesExist">Found whitespace around figure</entry>
  <entry key="msgFigureSpacesRemoved">Removed whitespace around figure</entry>
  <entry key="msgEmptyElementRemoved">Removed empty ''{0}'' element</entry>
  <entry key="msgEmptyElementExists">Found empty ''{0}'' element</entry>
  <entry key="msgTagRemoved">Removed ''{0}'' tag</entry>
  <entry key="msgTagExists">Found ''{0}'' tag</entry>
  <entry key="msgTagWithoutAttribRemoved">Removed ''{0}'' without attribute</entry>
  <entry key="msgMissingAttribAddedDefault">Added default value for ''{1}'' attribute to ''{0}'' element</entry>
  <entry key="msgTagWithoutAttrib">Found ''{0}'' without attribute</entry>
  <entry key="msgTagWithMissingAttribRemoved">Removed ''{0}'' tag with missing ''{1}'' attribute</entry>
  <entry key="msgTagAttribMissing">Found ''{0}'' with missing ''{1}'' attribute</entry>
  <entry key="msgTagAttribMissingDefault">Found ''{0}'' with missing ''{1}'' attribute. Enable auto-correct to set default</entry>
  <entry key="msgForbiddenAttribRemoved">Removed forbidden ''{1}'' attribute from ''{0}'' element</entry>
  <entry key="msgTagWithForbiddenAttrib">Found ''{0}'' with forbidden attribute ''{1}''</entry>
  <entry key="msgEmbeddedImage">Src attribute of image contains embedded image data: {0}. This is not supported by all output formats.</entry>
  <entry key="msgEmbeddedImageCorrected">Embedded image ''{0}'' has been replaced by reference to image-alias ''{1}''</entry>
  <entry key="msgEmbeddedImageExists">Cannot store embedded image, because alias ''{0}'' already exists.</entry>
  <entry key="msgFoundTextAlignStyle">Found element ''{0}'' with CSS style ''text-align:{1}''. Should be replaced by CSS class ''{2}''</entry>
  <entry key="msgInvalidTextAlignStyle">Found element ''{0}'' with invalid CSS style ''text-align:{1}''</entry>
  <entry key="msgTextAlignNormalized">Replaced style property ''text-align:{1}'' in element ''{0}'' by CSS class ''{2}''</entry>
  <!-- Other labels -->
  <entry key="headStyleStatistics">Style counters</entry>
  <entry key="headValidStyles">Valid styles:</entry>
  <entry key="headInvalidStyles">Invalid styles:</entry>
  <entry key="stylesCount">Count</entry>
  <entry key="stylesTotal">Total</entry>
  <!-- Check online help -->
  <entry key="longInfo"><![CDATA[
  <p>
  This rule provides basic Docmenta HTML checks. 
  The details for each check are given below:
  </p>
  <ul>
    <li><a href="#attribute_required">attribute_required</a></li>
    <li><a href="#broken_inline_inclusion">broken_inline_inclusion</a></li>
    <li><a href="#broken_link">broken_link</a></li>
    <li><a href="#content_required">content_required</a></li>
    <li><a href="#embedded_image">embedded_image</a></li>
    <li><a href="#invalid_image_src">invalid_image_src</a></li>
    <li><a href="#invalid_style">invalid_style</a></li>
    <li><a href="#invalid_target_type">invalid_target_type</a></li>
    <li><a href="#normalize_textalign">normalize_textalign</a></li>
    <li><a href="#trim_empty_paras">trim_empty_paras</a></li>
    <li><a href="#trim_figure_spaces">trim_figure_spaces</a></li>
  </ul>

  <hr />
  <a name="attribute_required" />
  <big><strong>attribute_required</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b>
    </p>
    <dl>
        <dt>
          <b><tt>attribute_required=<i>expression1,expression2,...,expressionN</i></tt></b>
        </dt>
        <dd>
          <p>
            <b>Element expression:</b><br />
            <b><tt><i>expression</i></tt> := <tt><i>tagName</i></tt></b><br />
            <b><tt><i>expression</i></tt> := <tt><i>tagName</i>[<i>attributes</i>]</tt></b><br />
            <b><tt><i>expression</i></tt> := <tt><i>tagName1</i>/.../<i>tagNameX</i>[<i>attributes</i>]</tt></b>
          </p>
          <p>
            <b>Attribute expression:</b><br />
            <b><tt><i>attributes</i></tt> := <tt><i>condition1</i>|<i>condition2</i>+...+<i>conditionY</i>|...</tt></b>
          </p>
          <p>
            <b>Attribute condition:</b><br />
            <b><tt><i>condition</i></tt> := <tt><i>attributeName</i></tt></b><br />
            <b><tt><i>condition</i></tt> := <tt><i>attributeName</i>=<i>defaultValue</i></tt></b><br />
            <b><tt><i>condition</i></tt> := <tt>!<i>attributeName</i></tt></b>
          </p>
    <p>
        The <tt>attribute_required</tt> argument defines 
        one or more element expressions separated by comma. 
        An element expression is an element name, optionally  
        followed by one or more attribute conditions in square brackets.
        Attributes conditions have to be separated 
        by the <tt>+</tt> or <tt>|</tt> operators. The <tt>+</tt> operator
        has the meaning of logical "and", whereas the  <tt>|</tt> operator
        has the meaning of logical "or".
        Note that explicit grouping of attribute conditions by round 
        brackets is <em>not</em> supported, though grouping of conditions 
        is done implicitly as the <tt>+</tt> operator has higher precedence 
        than the <tt>|</tt> operator.
    </p>
          <p><em>Character escapes</em><br/>
            Whitespace is used as argument separator and can therefore <em>not</em> 
            be used within the argument value.
            Furthermore, the plus, pipeline, square brackets and comma 
            (<tt>+</tt> <tt>|</tt> <tt>[</tt> <tt>]</tt> <tt>,</tt>) are
            interpreted as operators and separators.
            To insert one of these characters or other special characters within 
            the definition of <i>defaultValue</i>, the Unicode escape sequence 
            <tt>\u<i>XXXX</i></tt> has to be used, where <tt><i>XXXX</i></tt> is 
            a 4-digit hexadecimal Unicode number. 
          </p>
        </dd>
    </dl>
    <p>
        <b>Description:</b><br />
        The <tt>attribute_required</tt> check allows to define required 
        and/or forbidden attributes. 
        If an attribute is required, a default value can be specified.
    </p>
    <p><em>Required Attributes</em><br/>
        If an attribute condition consists solely of the attribute name, 
        then the attribute is a <em>required</em> attribute.
    </p>
    <p><em>Forbidden Attributes</em><br/> 
        If the attribute name is preceded
        by an exclamation mark (<tt>!</tt>), then the attribute is a 
        <em>forbidden</em> attribute (instead of <em>required</em>). In other  
        words, the exclamation mark has the meaning of logical "not". 
        If required and forbidden attributes are concatenated
        by the <tt>+</tt> operator, then the forbidden attributes are not
        allowed in combination with the required attributes.
    </p>
    <p><em>Default Values</em><br/> 
        The attribute name of a required attribute can optionally
        be followed by a <tt>=</tt> character, followed by a default value.
        If a required attribute does not exist, but has a default value 
        specified, and if auto-correction is enabled, then the attribute is 
        added and set to the default value. See the example below.
    </p>
    <p><em>Logging/Auto-Correction</em><br/>
      If a required attribute is missing or a forbidden attribute exists, 
      then the element is logged as invalid. 
      If auto-correction is enabled and a default value is given for a required 
      but missing attribute, then the attribute is added and set to the default 
      value. If a required but missing attribute has <em>no</em> default value, 
      then auto-correction removes the complete tag (the content between 
      the opening and closing tag is preserved).
      If forbidden attributes exists and auto-correction is enabled, then the 
      forbidden attributes are automatically removed. 
    </p>
    <p><em>Log/Remove elements without attributes</em><br/>
      If only the element name without attributes expression (in square 
      brackets) is given, then the expression results to true, 
      if an element with the given name has at least one arbitrary attribute. 
      In other words, specifying an element name without attributes expression 
      can be used to detect or remove elements <em>without</em> attributes 
      (for example, to avoid <tt>span</tt> elements without attribute).
    </p>
    <p>
      <b>Example:</b>
    </p>
    <p>
        &nbsp;&nbsp;&nbsp;<tt>attribute_required=div,span[class|id+title],table[border=0+!style]</tt>
    </p>
    <p>
      Given the argument value above, <tt>div</tt> elements must have at least  
      one attribute. Additionally, <tt>span</tt> elements must have either a 
      <tt>class</tt> attribute or an <tt>id</tt> attribute in combination with 
      a <tt>title</tt> attribute. The third expression defines, that 
      <tt>table</tt> elements must have a <tt>border</tt> attribute, whereas   
      the <tt>style</tt> attribute is forbidden (in combination with the 
      required <tt>border</tt> attribute). 
      If a <tt>div</tt>, <tt>span</tt> or <tt>table</tt> element does not 
      comply to these conditions, then the element is logged. 
    </p>
    <p><em>Auto-correction in the example above</em><br/>
      If auto-correction is enabled, then non-complying <tt>div</tt> and 
      <tt>span</tt> tags are removed (though, the content of the tags is 
      preserved).
      If a <tt>table</tt> element has no <tt>border</tt> attribute and 
      auto-correction is enabled, then the <tt>border</tt> attribute is 
      automatically added and set to the default value <tt>"0"</tt>. 
      If a <tt>table</tt> element has a <tt>style</tt> attribute, then 
      auto-correction automatically removes the <tt>style</tt> attribute.
    </p>
  </div>

  <hr />
  <a name="broken_inline_inclusion" />
  <big><strong>broken_inline_inclusion</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b> <em>none</em>
    </p>
    <p>
      <b>Description:</b><br/>
      This check logs broken inline inclusions. An inline inclusion is a 
      text pattern in the format <tt>[#<i>alias</i>]</tt> (title-inclusion) or 
      <tt>[##<i>alias</i>]</tt> (content-inclusion), where 
      <tt><i>alias</i></tt> is the alias of the target node.
    </p>
  </div>

  <hr />
  <a name="broken_link" />
  <big><strong>broken_link</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b> <em>none</em>
    </p>
    <p>
      <b>Description:</b><br/>
      This check logs broken links of <tt>a</tt> elements
      that specify the target through the <tt>href</tt> attribute. This check
      only validates internal links, where the <tt>href</tt> attribute starts 
      with <tt>"#"</tt>, <tt>"image/"</tt> or <tt>"file/"</tt>. A link is
      broken if a node with the specified target alias does not exist in the 
      store.
    </p>
  </div>

  <hr />
  <a name="content_required" />
  <big><strong>content_required</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b>
      <dl>
        <dt>
          <b><tt>content_required=<i>tag1,tag2,...</i></tt></b>
        </dt>
        <dd>
          <p>
            The tag names for which empty elements shall be logged or removed. 
            Multiple names have to be separated by comma (without space in between).
          </p>
        </dd>
      </dl>
    </p>
    <p>
      <b>Description:</b><br/>
      For each element <tt><i>tagX</i></tt> listed in the argument, 
      empty <tt><i>tagX</i></tt> elements are logged.
      If auto-correction is enabled, then empty <tt><i>tagX</i></tt> elements  
      are removed.
    </p>
    <p>
      <b>Example:</b>
    </p>
    <p>
        &nbsp;&nbsp;<tt>content_required=div,span</tt>
    </p>
    <p>
      Given the argument value above, empty <tt>div</tt> and <tt>span</tt> 
      elements are logged.
      If auto-correction is enabled, then empty <tt>div</tt> and/or <tt>span</tt> 
      elements are removed.
    </p>
  </div>

  <hr />
  <a name="embedded_image" />
  <big><strong>embedded_image</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b> <em>none</em>
    </p>
    <p>
      <b>Description:</b><br/>
      This check logs base64-encoded images that are embedded in the 
      <tt>src</tt> attribute of <tt>img</tt> elements.
      If auto-correction is enabled, then embedded images are automatically 
      converted to image-nodes with an auto-generated alias. 
      To assure that the alias is unique, the generated alias includes the MD5 
      checksum of the image. The images are stored in the first image-folder
      that is found on the same level as the content-node. If no such 
      image-folder exists, then a new image-folder is automatically created. 
    </p>
  </div>
      
  <hr />
  <a name="invalid_image_src" />
  <big><strong>invalid_image_src</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b> <em>none</em>
    </p>
    <p>
      <b>Description:</b><br/>
      This check logs broken image references of <tt>img</tt> elements. 
      An image reference is broken, if the <tt>src</tt> attribute
      does not exist, or the attribute value does not start with 
      <tt>"image/"</tt>, or does not reference a valid image alias.
    </p>
  </div>

  <hr />
  <a name="invalid_style" />
  <big><strong>invalid_style</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b> <em>none</em>
    </p>
    <p>
      <b>Description:</b><br/>
      This check logs the usage of non-existing style identifiers. A style 
      is assigned to an element through the <tt>class</tt> attribute.
      In other words, if the value of a <tt>class</tt> attribute contains 
      a style identifier for which no style exists, the the element is logged.
    </p>
  </div>

  <hr />
  <a name="invalid_target_type" />
  <big><strong>invalid_target_type</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b> <em>none</em>
    </p>
    <p>
      <b>Description:</b><br/>
      This check logs references with invalid target type. A reference is either 
      a link defined by the <tt>a</tt> element or an inserted image defined
      by an <tt>img</tt> element. If the <tt>href</tt> attribute of an
      <tt>a</tt> element starts with <tt>"#"</tt>, then the referenced node
      has to be a content-node. If the <tt>href</tt> attribute starts with
      <tt>"image/"</tt>, then the referenced node has to be an image-node. 
      If the <tt>href</tt> attribute starts with <tt>"file/"</tt>, 
      then the referenced node has to be a file-node. Otherwise an invalid
      target type is logged by this check.
      Accordingly, an <tt>img</tt> element is logged as invalid, if the 
      referenced node has <em>no</em> supported image type.
    </p>
  </div>

  <hr />
  <a name="normalize_textalign" />
  <big><strong>normalize_textalign</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b>
      <dl>
        <dt>
          <b><tt>normalize_textalign=<i>tag1,tag2,...</i></tt></b>
          <br/>
          <b><tt>normalize_textalign=*</tt></b>
        </dt>
        <dd>
          <p>
            Sets the element names to which the check shall be applied. 
            Multiple element names have to be separated by comma (without 
            space in between). Instead of providing a list of element names, 
            the wildcard <tt>*</tt> can be used, to apply the check to all 
            elements. If the argument <tt>normalize_textalign</tt> is missing,
            then the check is applied to all elements (same as using wildcard 
            <tt>*</tt>).
          </p>
        </dd>
      </dl>
    </p>
    <p>
      <b>Description:</b><br/>
      This check logs elements that have a <tt>style</tt> attribute containing  
      the CSS property <tt>text-align</tt>. 
      If auto-correction is enabled, then the CSS property <tt>text-align</tt>
      is removed and replaced by one of the CSS classes 
      <tt>align-left</tt>, <tt>align-center</tt>, <tt>align-right</tt> or 
      <tt>align-full</tt>.
    </p>
    <p>
      The CSS classes <tt>align-left</tt>, <tt>align-center</tt>, 
      <tt>align-right</tt> and  <tt>align-full</tt> are predefined in Docmenta 
      and should be used in preference to assigning the CSS property 
      <tt>text-align</tt>.
    </p>
    <p>
      <b>Example:</b>
    </p>
    <p>
        &nbsp;&nbsp;<tt>normalize_textalign=div,p</tt>
    </p>
    <p>
      Given the argument above, the check is applied to <tt>div</tt> and 
      <tt>p</tt> elements. If auto-correction is enabled, then, for example, the element
    </p>
    <pre>
    &lt;p style="text-align:right"&gt;  ...  &lt;/p&gt;</pre>
    <p>
    is transformed to:
    </p>
    <pre>
    &lt;p class="align-right"&gt;  ...  &lt;/p&gt;</pre>
  </div>

  <hr />
  <a name="trim_empty_paras" />
  <big><strong>trim_empty_paras</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b> <em>none</em>
    </p>
    <p>
      <b>Description:</b><br/>
      This check logs empty paragraphs at the end of content nodes. 
      If auto-correction is enabled, then an empty paragraph at the end of 
      a content node is removed. 
    </p>
    <p>
      Following HTML fragments are recognized as empty paragraphs:
    </p>
    <pre>
    &lt;p&gt;&lt;/p&gt;
    &lt;p&gt;&amp;nbsp;&lt;/p&gt;
    &lt;p&gt;&amp;#160;&lt;/p&gt;</pre>
    <p>
      Many XHTML editors insert an empty paragraph at the end of the content,
      as soon as the user moves the cursor after the last paragraph.
      The auto-correction functionality of this check can be used to 
      remove such empty paragraphs (for example, by enabling auto-correction  
      for the "Save" operation).
    </p>
  </div>

  <hr />
  <a name="trim_figure_spaces" />
  <big><strong>trim_figure_spaces</strong></big>
  <div style="margin-left:16pt;">
    <p>
      <b>Arguments:</b> <em>none</em>
    </p>
    <p>
      <b>Description:</b><br/>
      This check searches for whitespace around figures.
      If auto-correction is enabled, then the whitespace is removed.
    </p>
    <p>
      A figure is considered to be an HTML <tt>img</tt> element that has
      a <tt>title</tt> attribute assigned. In Docmenta, figures should be
      placed as a single element inside of paragraphs, 
      as shown by the following HTML fragment: 
    </p>
    <pre>
    &lt;p&gt;&lt;img title="..." ... /&gt;&lt;/p&gt;</pre>
    <p>
      No whitespace should exist between the <tt>img</tt> and the 
      <tt>p</tt> tags.
      However, if the content is created by a WYSIWYG editor, then
      whitespace is not visible and may be inserted by mistake.
      This check can be used to automatically remove such whitespace.
    </p>
    <p>
      Note that besides spaces, tabs and line breaks, this check also
      recognizes the character entities <tt>&amp;nbsp;</tt> and 
      <tt>&amp;#160;</tt> as whitespace.
    </p>
  </div>
  ]]>
  </entry>    
</properties>
