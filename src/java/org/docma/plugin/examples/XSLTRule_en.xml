<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
  <entry key="shortInfo">Generic XSL transformation</entry>
  <entry key="apply_xsl.title">Applies the configured XSL script</entry>
  <entry key="msgElementUpdated">Transforming ''{0}'' element:</entry>
  <entry key="msgReplacedBy">Replaced by</entry>
  <entry key="msgFoundElementUpdate">Found ''{0}'' element to be corrected:</entry>
  <entry key="msgHeaderOldElement">Before</entry>
  <entry key="msgHeaderNewElement">After</entry>
  <entry key="longInfo"><![CDATA[
    <p>
      <b>Arguments:</b>
      <dl>
        <dt><b><tt>script=<i>alias</i></tt></b></dt>
        <dd>The alias of the file-node that contains the XSL script.
            The <tt>script</tt> argument is mandatory.</dd>
        <dt><b><tt>apply=<i>tag1,tag2</i>[<i>att1</i>|<i>att2</i>+<i>att3</i>=<i>value1</i>+<i>att4</i>!=<i>value2</i>+!<i>att5</i>...|...],...</tt></b></dt>
        <dd>
          <p>
            The optional <tt>apply</tt> argument allows to restrict the XHTML  
            elements to which the XSL script is applied. If no <tt>apply</tt>
            argument is given, then the XSL script is applied to all elements.
          </p>
          <p>
            The value of the <tt>apply</tt> argument has to be a comma separated
            list of element expressions. Note that space is used as 
            argument separator. Therefore, no space is allowed within the
            list of element expressions. 
            An element expression is an element name, optionally  
            followed by an attributes expression in square brackets.
            An attributes expression is one or more attribute conditions 
            concatenated by the <tt>+</tt> or <tt>|</tt> operators. 
            The <tt>+</tt> operator has the meaning of logical "and", whereas 
            the  <tt>|</tt> operator has the meaning of logical "or". 
            Note that explicit grouping of attribute conditions by round 
            brackets is <em>not</em> supported, though grouping of conditions 
            is done implicitly as the <tt>+</tt> operator has higher precedence 
            than the <tt>|</tt> operator.
          </p>
          <p><em>Check attribute existance</em><br/>
            If an attribute condition consists solely of the attribute name, 
            then the condition results to <tt>true</tt>, if the element has an 
            attribute with the given name. Otherwise the result is 
            <tt>false</tt>. In case the attribute name is preceded 
            by an exclamation mark (<tt>!</tt>), then the attribute condition 
            results to <tt>true</tt>, only if the element has <em>no</em>  
            attribute with the given name. In other words, the exclamation mark 
            has the meaning of logical "not".
          </p>
          <p><em>Value comparison</em><br/> 
            The attribute name can be followed by the <tt>=</tt> or 
            <tt>!=</tt> operator, followed by a string constant. 
            The <tt>=</tt> operator has the meaning of "equals" and the
            <tt>!=</tt> operator has the meaning of "equals not".
            See the example below.
          </p>
          <p><em>Character escapes</em><br/>
            Whitespace is <em>not</em> allowed within the <tt>apply</tt> 
            argument. Furthermore, the characters <tt>+</tt> and <tt>|</tt>, as
            well as comma (<tt>,</tt>) cannot be used within the value 
            definition of an attribute comparison, because these characters are
            interpreted as operators and expression separators.
            To insert these characters in a value definition, the 
            Unicode escape sequence <tt>\u<i>nnnn</i></tt> can be used, where 
            <tt><i>nnnn</i></tt> is a decimal Unicode number.
          </p>
        </dd>
        <dt><b><tt>keep=<i>tag1,tag2</i>[<i>att1</i>|<i>att2</i>+<i>att3</i>=<i>value1</i>+<i>att4</i>!=<i>value2</i>+!<i>att5</i>...|...],...</tt></b></dt>
        <dd>
          <p>
            The optional <tt>keep</tt> argument allows to define a list of XHTML  
            elements, which shall be excluded from XSL transformation.
          </p>
          <p>
            The value of the <tt>keep</tt> argument has to be a comma separated
            list of element expressions. The element expressions have to be 
            given in the same format as for the <tt>apply</tt> argument (see 
            the description of the <tt>apply</tt> argument above).
          </p>
          <p>
            If the <tt>apply</tt> and the <tt>keep</tt> argument are given
            and an element matches both arguments, then the <tt>keep</tt>
            argument has higher priority (in other words, the XSL script 
            is <em>not</em> applied).
          </p>
        </dd>
        <dt><b><tt>factory=<i>classname</i></tt></b></dt>
        <dd>The fully qualified factory class name that provides implementation 
            of <tt>javax.xml.transform.TransformerFactory</tt>.
            This argument is optional. If no class name is provided, then
            the static method 
            <tt>javax.xml.transform.TransformerFactory.newInstance()</tt> is
            used to create the factory object.
        </dd>
      </dl>
    </p>
    <p>
      <b>Description:</b><br/>
      Applies the XSL script that is specified by the <tt>script</tt> argument
      to the elements specified by the <tt>apply</tt> argument.
      If no <tt>apply</tt> argument is given, then the XSL script is applied to 
      all XHTML elements (except those, specified by the <tt>keep</tt> 
      argument).
    </p>
    <p>
      Note that the <tt>apply</tt> argument only needs to define the outer
      elements to which the XSL script shall be applied. The XSL script can then  
      further control, which XSL template shall be applied to which  
      (sub-)elements, through the template matching mechanism. This includes 
      template selection through XPATH expressions.
    </p>
    <p>
      In the following examples, we assume the existance of an XSL script
      (text file) with alias <tt>my_xsl_script</tt>, withs following
      file content:
    </p>
    <pre>
    </pre>
    <p>
      <b>Example 1:</b>
    </p>
    <p>
      Given following XHTML content:
    </p>
    <pre>
    </pre>
    <p>
      If an XSLTRule is configured with the <tt>script</tt> argument
    </p>
    <p>
        &nbsp;&nbsp;<tt>script=my_xsl_script</tt>
    </p>
    <p>
      and no other arguments are given, then the XSL script identified by alias 
      <tt>my_xsl_script</tt> is applied to all elements.
    </p>
    <p>
      <b>Example 2:</b>
    </p>
    <p>
        &nbsp;&nbsp;<tt>script=my_xsl_script apply=span,div[id+title|class=note]</tt>
    </p>
    <p>
      Given the argument definition above, the XSL script with alias 
      <tt>my_xsl_script</tt> is applied to <em>all</em> <tt>span</tt> elements
      and to <tt>div</tt> elements that have an <tt>id</tt> attribute in 
      combination with a <tt>title</tt> attribute or a <tt>class</tt> 
      attribute with value <tt>"note"</tt>.
    </p>
    <p>
      <b>Example 3:</b>
    </p>
    <p>
        &nbsp;&nbsp;<tt>script=my_xsl_script apply=table[!border|border!=0]</tt>
    </p>
    <p>
      Given the argument definition above, the XSL script with alias 
      <tt>my_xsl_script</tt> is applied to <tt>table</tt> elements
      that have <em>no</em> <tt>border</tt> attribute or which have a 
      <tt>border</tt> attribute with a value other than <tt>"0"</tt>.
    </p>
  ]]>
  </entry>    
</properties>
